#! /usr/bin/env python
 
PACKAGE='ueye'
import roslib; roslib.load_manifest(PACKAGE)
  
#from driver_base.msg import SensorLevels
from dynamic_reconfigure.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

mode_enum = gen.enum( [ gen.const("TGR_AUTO",				int_t, 0,	""),
                        gen.const("TGR_HARDWARE_RISING",	int_t, 2,	""),
                        gen.const("TGR_HARDWARE_FALLING",	int_t, 3,	""),],
                      "Enum to set trigger mode")
                      
AWB_enum = gen.enum( [ gen.const("AWB_DISABLE",		int_t, 0,	""),
                        gen.const("AWB_AUTO",	    int_t, 1,	""),
                        gen.const("AWB_ONE_SHOT",	int_t, 2,	""),],
                      "Enum to set AWB mode")
                      
CS_enum = gen.enum( [gen.const("SRGB_D50",		int_t, 0,	""),
                        gen.const("SRGB_D65",	    int_t, 1,	""),
                        gen.const("CIE_RGB_E",	    int_t, 2,	""),
                        gen.const("ECI_RGB_D50",	    int_t, 3,	""),
                        gen.const("ADOBE_RGB_D65",	int_t, 4,	""),],
                      "Enum to set Color Space")

#       Name				Type		Reconfiguration level				Description										Default  Min   	Max
gen.add("config_path",		str_t,		SensorLevels.RECONFIGURE_RUNNING,	"Path to load and store cfg files.",			"")
gen.add("white_balance",	int_t,		SensorLevels.RECONFIGURE_RUNNING,	"AWB mode",									0,	edit_method = AWB_enum)
gen.add("color_space",	    int_t,		SensorLevels.RECONFIGURE_RUNNING,	"Color Space",								2,	edit_method = CS_enum)
gen.add("color_temp",	    int_t,	    SensorLevels.RECONFIGURE_RUNNING,	"Color Temperature", 		            5000,		100,	9999)
gen.add("trigger",			int_t,		SensorLevels.RECONFIGURE_RUNNING,	"Trigger mode",								0,	edit_method = mode_enum)
gen.add("force_streaming",	bool_t,		SensorLevels.RECONFIGURE_RUNNING,	"Force the camera to stream images.",			False)
gen.add("hardware_gamma",	bool_t,		SensorLevels.RECONFIGURE_RUNNING,	"Sets the camera hardware gamma correction.",	False)
gen.add("auto_exposure",	bool_t,		SensorLevels.RECONFIGURE_RUNNING,	"Sets the camera exposure duration to automatic.", False)
gen.add("exposure_time",	double_t,	SensorLevels.RECONFIGURE_RUNNING,	"Sets the camera exposure time (ms)", 		10,		0.18,	100)
gen.add("gain_boost",		bool_t,		SensorLevels.RECONFIGURE_RUNNING,	"Enables constant hardware analog boost.",		False)
gen.add("auto_gain",		bool_t,		SensorLevels.RECONFIGURE_RUNNING,	"Sets the image to automatic.",				False)
gen.add("gain",				int_t,		SensorLevels.RECONFIGURE_RUNNING,	"Sets the image gain", 						100,	100,	400)
gen.add("zoom",				int_t,		SensorLevels.RECONFIGURE_RUNNING,	"The zoom level. (Global binning)", 		1,		1,		4)
gen.add("frame_rate",		double_t,	SensorLevels.RECONFIGURE_RUNNING,	"Sets the expected triggering rate ", 		10,		1,		240)
gen.add("pixel_clock",		int_t,		SensorLevels.RECONFIGURE_RUNNING,	"Pixel clock speed in MHz",					35, 	5,		86)
gen.add("frame_id",			str_t,		SensorLevels.RECONFIGURE_RUNNING,	"The optical camera tf frame set in message headers.", 	"/camera")
gen.add("rotate180",		bool_t,		SensorLevels.RECONFIGURE_RUNNING,	"Rotate image 180 degrees.",				False)

exit(gen.generate(PACKAGE, "ueye", "mono"))

