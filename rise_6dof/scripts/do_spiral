#!/usr/bin/env python

from __future__ import division

import math

import numpy

import roslib
roslib.load_manifest('rise_6dof')
import rospy
from nav_msgs.msg import Odometry
from std_msgs.msg import Header
from geometry_msgs.msg import Pose, Twist, Vector3, Quaternion, Point
from tf import transformations

from uf_common import orientation_helpers
from uf_common.msg import PoseTwist, PoseTwistStamped


rospy.init_node('do_spiral')

RADIUS = 2 # meter
PERIOD = 30 # second
DESCENT = 0.5 # meter/revolution
dt = 1e-3 # second (used for numerical derivatives)

def position_generator(t):
    r = RADIUS*(1 - math.e**(-t/30))
    w = 2*math.pi / PERIOD
    return numpy.array([r*math.cos(w*t), r*math.sin(w*t), -DESCENT*t/PERIOD])

def positionvelocity_generator(t):
    pos = position_generator(t)
    vel = (position_generator(t+dt/2) - position_generator(t-dt/2))/dt
    return pos, vel

def positionorientationvelocity_generator(t):
    pos, vel = positionvelocity_generator(t)
    orient = orientation_helpers.lookat(vel)
    return pos, orient, vel

def positionorientationvelocityangularvelocity_generator(t):
    pos, orient, vel = positionorientationvelocity_generator(t)
    
    orient1 = positionorientationvelocity_generator(t-dt/2)[1]
    orient2 = positionorientationvelocity_generator(t+dt/2)[1]
    angvel = orientation_helpers.quat_to_rotvec(transformations.quaternion_multiply(orient1, transformations.quaternion_inverse(orient2)))/dt
    
    return pos, orient, vel, angvel


print 'waiting for current position...'
current = rospy.wait_for_message('/odom', Odometry)
start = orientation_helpers.xyz_array(current.pose.pose.position)
print '...got', start

pub = rospy.Publisher('/trajectory', PoseTwistStamped)

start_time = rospy.Time.now()
while not rospy.is_shutdown():
    rospy.sleep(.01)
    
    now_time = rospy.Time.now()
    
    t = (now_time - start_time).to_sec()
    pos, orient, vel, angvel = positionorientationvelocityangularvelocity_generator(t)
    
    world_from_body = transformations.quaternion_matrix(orient)[:3, :3]
    
    pub.publish(PoseTwistStamped(
        header=Header(
            stamp=now_time,
            frame_id=current.header.frame_id,
        ),
        posetwist=PoseTwist(
            pose=Pose(
                position=Point(*pos + start),
                orientation=Quaternion(*orient),
            ),
            twist=Twist(
                linear=Vector3(*world_from_body.T.dot(vel)),
                angular=Vector3(*world_from_body.T.dot(angvel)),
            ),
        ),
    ))
