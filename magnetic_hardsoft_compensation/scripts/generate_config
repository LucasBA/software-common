#!/usr/bin/env python

from __future__ import division

import math
import random
import sys

import numpy
import yaml

import roslib
roslib.load_manifest('magnetic_hardsoft_compensation')
import rosbag

with rosbag.Bag(sys.argv[1]) as bag:
    data = numpy.array([[msg.vector.x, msg.vector.y, msg.vector.z]
        for topic, msg, t in bag.read_messages(topics=['/imu/mag_raw'])])

try:
    import matplotlib.pyplot as plt
    from mpl_toolkits.mplot3d import Axes3D
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(*zip(*data[::10,:]))
    plt.show()
except:
    import traceback
    traceback.print_exc()

# fit model
#     X[0] x2 + X[1] y2 + X[2] z2 +
#     X[3] (2xy) + X[4] (2xz) + X[5] (2yz) +
#     X[5] x + X[7] y + X[8] z = 1
# to data using linear least squares

A = numpy.zeros((data.shape[0], 9))
A[:,0] = data[:,0]**2;
A[:,1] = data[:,1]**2;
A[:,2] = data[:,2]**2;
A[:,3] = 2*data[:,0]*data[:,1];
A[:,4] = 2*data[:,0]*data[:,2];
A[:,5] = 2*data[:,1]*data[:,2];
A[:,6] = data[:,0];
A[:,7] = data[:,1];
A[:,8] = data[:,2];

B = numpy.ones((data.shape[0], 1))

X = numpy.linalg.inv(A.T.dot(A)).dot(A.T).dot(B)[:,0]

error = sum(A[:,i] * X[i] for i in xrange(9)) - 1
print 'mse =', numpy.mean(error**2)

# Find the center of ellipsoid
a = numpy.array([
    [X[0], X[3], X[4]],
    [X[3], X[1], X[5]],
    [X[4], X[5], X[2]],
])
b = numpy.array([X[6], X[7], X[8]])

[P1,a2,P2] = numpy.linalg.svd(a)

b2 = b.T.dot(P1).T

x0 = (b2 / a2)*.5

shift = P1.dot(x0)
print 'shift =', shift
rot = P1
print 'rot =', rot

c = 1 + x0[0]**2*a2[0] + x0[1]**2*a2[1] + x0[2]**2*a2[2]

# Find the 1/2 length of all major axes of the ellipsoid

Major1 = math.sqrt(c/a2[0])
Major2 = math.sqrt(c/a2[1])
Major3 = math.sqrt(c/a2[2])

# center scaling factors around 1 since calibration routine has
# no way of determining magnitude of scale factor vector
Major1_ = Major1/(Major1*Major2*Major3)**(1/3)
print 'Major1 =', Major1_
Major2_ = Major2/(Major1*Major2*Major3)**(1/3)
print 'Major2 =', Major2_
Major3_ = Major3/(Major1*Major2*Major3)**(1/3)
print 'Major3 =', Major3_

scale = rot.T.dot(numpy.diag([Major1_, Major2_, Major3_])).dot(rot)

print
print yaml.dump(dict(
    scale=map(lambda x: map(float, x), scale),
    shift=map(float, shift),
))
