#!/usr/bin/python

from __future__ import division

import operator
import struct

from twisted.internet import defer, protocol, reactor, serialport, task

import roslib
roslib.load_manifest('skytraq_driver')
import rospy
from std_msgs.msg import Header

from skytraq_driver import datachunker, protocol as skytraq_protocol
from skytraq_driver.msg import SerialPacket

def sleep(dt):
    d = defer.Deferred()
    reactor.callLater(dt, d.callback, None)
    return d

class GPS(protocol.Protocol):
    def __init__(self):
        self.poll_task = task.LoopingCall(self.think)
        self.pub = rospy.Publisher('skytraq_serial', SerialPacket)
        self.last_message = None
        self.send = skytraq_protocol.SendProxy(self.send_raw)
        self.dataReceived = datachunker.DataChunker(self.dataReceiver())
    
    def dataReceiver(self):
        while True:
            if (yield 1) != '\xa0': continue
            stamp = rospy.Time.now()
            if (yield 1) != '\xa1': continue
            length, = struct.unpack('>H', (yield 2))
            payload = yield length
            checksum = yield 1
            if (yield 1) != '\x0d': continue
            if (yield 1) != '\x0a': continue
            
            if ord(checksum) != reduce(operator.xor, map(ord, payload), 0):
                print 'invalid checksum'
                continue
            
            self.pub.publish(SerialPacket(
                header=Header(
                    stamp=stamp,
                ),
                payload=payload,
            ))
    
    def connectionMade(self):
        self.sv_counter = 0
        self.last_message = reactor.seconds()
        self.poll_task.start(0.5)
    
    def think(self):
        if not (reactor.seconds() - 5 < self.last_message < reactor.seconds() + 100):
            rospy.logerr('nothing received for 5 seconds, reinitializing device')
            self.transport.loseConnection()
            return
        
        self.send.get_ephemeris(chr(self.sv_counter))
        self.sv_counter += 1
        if self.sv_counter == 33:
            self.sv_counter = 1
    
    @defer.inlineCallbacks
    def init(self):
        self.send.configure_output_message_format('\x02\x00')
        yield sleep(.3)
        self.send.configure_binary_measurement_output_rates('\x04\x01\x01\x01\x01\x01\x00')
        yield sleep(.3)
        self.sv_counter = 1
    
    def send_raw(self, payload):
        self.transport.write(
            '\xa0\xa1' +
            struct.pack('>H', len(payload)) +
            payload +
            chr(reduce(operator.xor, map(ord, payload), 0)) +
            '\x0d\x0a')
    
    def connectionLost(self, reason):
        self.poll_task.stop()
        reactor.callLater(0, connect)

rospy.init_node('skytraq_driver')

def connect():
    serialport.SerialPort(GPS(), rospy.get_param('~port'), reactor, 115200)
connect()

reactor.callWhenRunning(lambda: rospy.core.add_client_shutdown_hook(lambda reason=None: reactor.callFromThread(reactor.stop)))
reactor.run()
