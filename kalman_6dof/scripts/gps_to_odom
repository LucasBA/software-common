#!/usr/bin/env python

from __future__ import division

import math

import numpy

import roslib
roslib.load_manifest('kalman_6dof')
roslib.load_manifest('gps_common')
import rospy
from geometry_msgs.msg import WrenchStamped, Wrench, Vector3, Twist, Pose, Point, Quaternion, PoseStamped, PoseWithCovariance, TwistWithCovariance
from std_msgs.msg import Header
from nav_msgs.msg import Odometry
from gps_common.msg import GPSFix
from tf import transformations
import tf


rospy.init_node('gps_to_odom', anonymous=True)


def ecef_from_latlongheight(latitude, longitude, height):
    # WGS 84
    a = 6378137.0
    f = 1/298.257223563
    
    e = 2*f - f**2
    
    N = a/math.sqrt(1 - e**2*math.sin(latitude)**2)
    return numpy.array([
        (N + height)*math.cos(latitude)*math.cos(longitude),
        (N + height)*math.cos(latitude)*math.sin(longitude),
        (N*(1 - e**2) + height)*math.sin(latitude),
    ])

pub = rospy.Publisher('gps_odom', Odometry)
prev_msg_position = None

start_pos = None

def callback(msg):
    global prev_msg_position
    # gpsd_client seems to send duplicate messages ... filter them out
    if msg.latitude == prev_msg_position:
        #print 'ignored!'
        return
    prev_msg_position = msg.latitude
    
    pos = ecef_from_latlongheight(
        math.radians(msg.latitude),
        math.radians(msg.longitude),
        msg.altitude,
    )
    global start_pos
    if start_pos is None:
        start_pos = pos
    
    up_ecef = transformations.unit_vector(start_pos)
    east_ecef = transformations.unit_vector(numpy.cross([0, 0, 1], up_ecef))
    north_ecef = numpy.cross(up_ecef, east_ecef)
    enu_from_ecef = numpy.array([east_ecef, north_ecef, up_ecef])
    
    relpos = enu_from_ecef.dot(pos - start_pos)
    
    vel = numpy.array([
        msg.speed * math.sin(math.radians(msg.track)),
        msg.speed * math.cos(math.radians(msg.track)),
        msg.climb,
    ])
    #print pos
    print relpos, vel
    
    pub.publish(Odometry(
        header=Header(
            stamp=msg.header.stamp,
            frame_id='/map',
        ),
        child_frame_id='/gps',
        pose=PoseWithCovariance(
            pose=Pose(
                position=Point(*relpos),
                orientation=Quaternion(0, 0, 0, 1),
            ),
            covariance=numpy.diag([1, 2, 3, 1e10, 1e10, 1e10]).flatten(),
        ),
        twist=TwistWithCovariance(
            twist=Twist(
                linear=Vector3(*vel),
                angular=Vector3(0, 0, 0),
            ),
            covariance=numpy.diag([1, 2, 3, 1e10, 1e10, 1e10]).flatten(),
        ),
    ))
rospy.Subscriber('extended_fix', GPSFix, callback)

rospy.spin()
