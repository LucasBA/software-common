#!/usr/bin/env python

from __future__ import division

import numpy

import roslib
roslib.load_manifest('kalman_6dof')
import rospy
from geometry_msgs.msg import WrenchStamped, Wrench, Vector3, Twist, Pose, Point, Quaternion, PoseStamped
from std_msgs.msg import Header
from nav_msgs.msg import Odometry
from tf import transformations
import tf


rospy.init_node('odometry_to_tf')

tf_broadcaster = tf.TransformBroadcaster()
pub = rospy.Publisher('gps2', PoseStamped)
xyz_array = lambda o: numpy.array([o.x, o.y, o.z])
xyzw_array = lambda o: numpy.array([o.x, o.y, o.z, o.w])
first = None
last = None
prev_msg_pose = None
def callback(msg):
    global prev_msg_pose
    if msg.pose.pose.position == prev_msg_pose:
        print 'ignored!'
        return
    print
    print 'XXX'
    print msg.pose.pose
    print prev_msg_pose
    print
    prev_msg_pose = msg.pose.pose.position
    msg.pose.pose.orientation = Quaternion(x=0, y=0, z=0, w=1)
    global first, last
    if first is None: first = msg
    if not (-1e300 < msg.pose.pose.position.z < 1e300):
        if not last:
           print 'waiting'
           return
        print 'replace with', last.pose.pose.position.z
        msg.pose.pose.position.z = last.pose.pose.position.z
        print msg.pose.pose.position.z
    else:
        print 'last set to', msg
        last = msg
    pub.publish(PoseStamped(
        header=Header(
            frame_id='/map',
            stamp=msg.header.stamp,
        ),
        pose=Pose(
            position=Point(*xyz_array(msg.pose.pose.position) - xyz_array(first.pose.pose.position)),
            orientation=msg.pose.pose.orientation,
        ),
    ))
    #tf_broadcaster.sendTransform(xyz_array(msg.pose.pose.position) - xyz_array(first.pose.pose.position), xyzw_array(msg.pose.pose.orientation), msg.header.stamp, msg.child_frame_id or '/imu', msg.header.frame_id)
rospy.Subscriber('odom', Odometry, callback)

rospy.spin()
