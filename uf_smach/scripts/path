#!/usr/bin/env python

import roslib; roslib.load_manifest('uf_smach')
from uf_smach.common_states import WaypointState, VelocityState
from uf_smach import legacy_vision_states
from uf_smach.util import StateSharedHandles, left_orientation_selector, right_orientation_selector

import numpy
import rospy
import smach
import smach_ros

def main():
    rospy.init_node('smach_example_state_machine')

    # Create a SMACH state machine
    sm = smach.Sequence(['succeeded', 'failed', 'timeout', 'preempted'], 'succeeded')

    # Create all the stuff shared between states
    shared = StateSharedHandles()

    # Open the container
    with sm:
        smach.Sequence.add('DEPTH', WaypointState(shared, lambda cur: cur.depth(.4)))
        smach.Sequence.add('APPROACH', VelocityState(shared, numpy.array([.2, 0, 0])))
        smach.Sequence.add('WAIT_PIPE',
            legacy_vision_states.WaitForObjectsState(shared, 'find2_down_camera', 'pipe'))
        smach.Sequence.add('CENTER_PIPE', legacy_vision_states.CenterObjectState(shared, 'find2_down_camera'))#, left_orientation_selector))
        smach.Sequence.add('ALIGN_PIPE', legacy_vision_states.AlignObjectState(shared, 'find2_down_camera'))#, left_orientation_selector))
        smach.Sequence.add('FORWARD', WaypointState(shared, lambda cur: cur.forward(2)))

    sis = smach_ros.IntrospectionServer('path', sm, '/SM_ROOT')
    sis.start()

    # Execute SMACH plan
    outcome = sm.execute()

    #rospy.spin()
    sis.stop()

if __name__ == '__main__':
    main()
