#!/usr/bin/env python

import roslib; roslib.load_manifest('uf_smach')
from uf_smach.states import WaypointState, VelocityState, WaitForObjectsState, ApproachObjectState
from object_finder.msg import TargetDesc
from uf_common.msg import PoseTwistStamped
from uf_common.orientation_helpers import PoseEditor
from geometry_msgs.msg import Quaternion
from uf_smach.util import StateSharedHandles, left_position_selector, right_position_selector

import numpy
import rospy
import smach
import smach_ros

def main():
    rospy.init_node('smach_example_state_machine')


    
    traj = PoseEditor.from_PoseTwistStamped_topic('/trajectory')

    shooter_desc = TargetDesc()
    shooter_desc.type = TargetDesc.TYPE_OBJECT
    shooter_desc.object_filename = roslib.packages.resource_file('auvsi_robosub', 'models', '2013/shooter.obj')
    shooter_desc.prior_distribution.pose.orientation = Quaternion(*traj.turn_left_deg(180).orientation)
    shooter_desc.disallow_yawing = True
    shooter_desc.min_dist = 4
    shooter_desc.max_dist = 8
    
    
    target = TargetDesc()
    target.type = TargetDesc.TYPE_OBJECT
    target.object_filename = roslib.packages.resource_file('auvsi_robosub', 'models', '2013/12in_hexagon.obj')
    target.prior_distribution.pose.orientation = Quaternion(*traj.turn_left_deg(180).orientation)
    cov = numpy.zeros((6, 6))
    a = numpy.array([traj.forward_vector]).T * 100
    cov[3:, 3:] += a.dot(a.T)
    target.prior_distribution.covariance = cov.flatten()
    target.min_dist = .9
    target.max_dist = 1/.9
    target.allow_rolling = True
    target.disallow_yawing = True

    # Create a SMACH state machine
    sm = smach.Sequence(['succeeded', 'timeout', 'failed'], 'succeeded')

    # Create all the stuff shared between states
    shared = StateSharedHandles()

    # Open the container
    with sm:
        smach.Sequence.add('DEPTH', WaypointState(shared, lambda cur: cur.depth(1.5)))
        
        smach.Sequence.add('APPROACH', VelocityState(shared, numpy.array([.2, 0, 0])))
        smach.Sequence.add('WAIT_SHOOTER',
                           WaitForObjectsState(shared, 'find_forward',
                                                    [shooter_desc], .85))
        smach.Sequence.add('APPROACH_SHOOTER',
                           ApproachObjectState(shared, 'find_forward',
                                               'forward_camera', 5, marker='red'))
        
        smach.Sequence.add('OPEN_LOOP_FORWARD', WaypointState(shared, lambda cur: cur.forward(4)))
        smach.Sequence.add('WAIT_HEXAGON',
                           WaitForObjectsState(shared, 'find_forward',
                                                    [target], .85))
        smach.Sequence.add('APPROACH_HEXAGON',
                           ApproachObjectState(shared, 'find_forward',
                                               'forward_camera', 1))
        smach.Sequence.add('OPEN_LOOP_FORWARD2', WaypointState(shared, lambda cur: cur.forward(1)))

    sis = smach_ros.IntrospectionServer('shooter', sm, '/SM_ROOT')
    sis.start()

    # Execute SMACH plan
    outcome = sm.execute()

    rospy.spin()
    sis.stop()

if __name__ == '__main__':
    main()
