#!/usr/bin/env python

from __future__ import division

import numpy

import roslib
roslib.load_manifest('thruster_mapper')
import rospy
from geometry_msgs.msg import WrenchStamped
from std_msgs.msg import Header
import tf
from tf import transformations

from thruster_mapper.msg import ThrusterInfo, ThrusterCommand


rospy.init_node('thruster_mapper')


thrusterinfos = {} # cache of received ThrusterInfo messages by id

# listen for info messages and update thrusterinfos with them
def thrusterinfo_callback(msg):
    if msg.id in thrusterinfos and msg.header.stamp < thrusterinfos[msg.id].header.stamp:
        return # this is older than current info
    if not (msg.min_force < 0 < msg.max_force):
        rospy.logerr('Thruster must be able to exert negative and positive thrust.')
        return
    thrusterinfos[msg.id] = msg
rospy.Subscriber('thrusters/info', ThrusterInfo, thrusterinfo_callback)


# listen for wrenches and send out ThrusterCommand messages
xyz_array = lambda o: numpy.array([o.x, o.y, o.z])
tf_listener = tf.TransformListener()
thrustercommand_publisher = rospy.Publisher('thrusters/command', ThrusterCommand)
def wrench_callback(msg):
    wrench = numpy.concatenate([xyz_array(msg.wrench.force), xyz_array(msg.wrench.torque)])
    
    # get thrusterinfos that haven't expired
    good_thrusterinfos = []
    for ti in thrusterinfos.values():
        if ti.header.stamp + ti.lifetime < msg.header.stamp:
            continue # thrusterinfo has expired
        
        try:
            trans, rot_q = tf_listener.lookupTransform(
                msg.header.frame_id, ti.header.frame_id, msg.header.stamp)
        except Exception, e:
            rospy.logerr("lookupTransform failed: %s", e)
            continue
        rot = transformations.quaternion_matrix(rot_q)[:3, :3]
        
        good_thrusterinfos.append((
            ti, # thrusterinfo
            trans + rot.dot(xyz_array(ti.position)), # position in wrench frame
            rot.dot(transformations.unit_vector(xyz_array(ti.direction))), # direction in wrench frame
        ))
    
    if not good_thrusterinfos:
        return
    
    wrench_from_efforts = numpy.array([numpy.concatenate([
        direction, # force = direction * effort
        numpy.cross(position, direction), # torque = (position X direction) * effort
    ]) for ti, position, direction in good_thrusterinfos]).T
    
    efforts, residues, rank, s = numpy.linalg.lstsq(wrench_from_efforts, wrench)
    assert len(efforts) == len(good_thrusterinfos)
    
    scaled_max = max(effort/ti.max_force if effort >= 0 else -effort/-ti.min_force for (ti, _, _), effort in zip(good_thrusterinfos, efforts))
    if scaled_max > 1:
        rospy.loginfo('Desired effort exceeded maximum by %i%%.', (scaled_max - 1) * 100)
        efforts = efforts / scaled_max
    
    for (ti, _, _), effort in zip(good_thrusterinfos, efforts):
        thrustercommand_publisher.publish(ThrusterCommand(
            header=Header(
                stamp=msg.header.stamp,
                frame_id=ti.header.frame_id,
            ),
            id=ti.id,
            force=effort,
        ))
rospy.Subscriber('wrench', WrenchStamped, wrench_callback)


rospy.spin()
